
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000226  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000674  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bd  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000371  00000000  00000000  00000f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009d  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__ctors_end>
   4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
   8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
   c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  10:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  18:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  1c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  20:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  24:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  28:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  30:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  34:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  38:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  3c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  40:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  44:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  48:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  4c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  50:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  54:	e2 00       	.word	0x00e2	; ????
  56:	e5 00       	.word	0x00e5	; ????
  58:	e5 00       	.word	0x00e5	; ????
  5a:	e5 00       	.word	0x00e5	; ????
  5c:	d6 00       	.word	0x00d6	; ????
  5e:	e5 00       	.word	0x00e5	; ????
  60:	ca 00       	.word	0x00ca	; ????
  62:	be 00       	.word	0x00be	; ????
  64:	e5 00       	.word	0x00e5	; ????
  66:	e5 00       	.word	0x00e5	; ????
  68:	e5 00       	.word	0x00e5	; ????
  6a:	e5 00       	.word	0x00e5	; ????
  6c:	e5 00       	.word	0x00e5	; ????
  6e:	e5 00       	.word	0x00e5	; ????
  70:	e5 00       	.word	0x00e5	; ????
  72:	e5 00       	.word	0x00e5	; ????
  74:	e5 00       	.word	0x00e5	; ????
  76:	e5 00       	.word	0x00e5	; ????
  78:	e5 00       	.word	0x00e5	; ????
  7a:	e5 00       	.word	0x00e5	; ????
  7c:	e5 00       	.word	0x00e5	; ????
  7e:	e5 00       	.word	0x00e5	; ????
  80:	e5 00       	.word	0x00e5	; ????
  82:	e5 00       	.word	0x00e5	; ????
  84:	e5 00       	.word	0x00e5	; ????
  86:	e5 00       	.word	0x00e5	; ????
  88:	e5 00       	.word	0x00e5	; ????
  8a:	e5 00       	.word	0x00e5	; ????
  8c:	e5 00       	.word	0x00e5	; ????
  8e:	e5 00       	.word	0x00e5	; ????
  90:	e5 00       	.word	0x00e5	; ????
  92:	e5 00       	.word	0x00e5	; ????
  94:	e5 00       	.word	0x00e5	; ????
  96:	e5 00       	.word	0x00e5	; ????
  98:	e5 00       	.word	0x00e5	; ????
  9a:	e5 00       	.word	0x00e5	; ????
  9c:	e5 00       	.word	0x00e5	; ????
  9e:	e5 00       	.word	0x00e5	; ????
  a0:	e5 00       	.word	0x00e5	; ????
  a2:	e5 00       	.word	0x00e5	; ????
  a4:	e5 00       	.word	0x00e5	; ????
  a6:	e5 00       	.word	0x00e5	; ????
  a8:	e5 00       	.word	0x00e5	; ????
  aa:	e5 00       	.word	0x00e5	; ????
  ac:	e5 00       	.word	0x00e5	; ????
  ae:	e5 00       	.word	0x00e5	; ????
  b0:	e5 00       	.word	0x00e5	; ????
  b2:	e5 00       	.word	0x00e5	; ????
  b4:	e5 00       	.word	0x00e5	; ????
  b6:	e5 00       	.word	0x00e5	; ????
  b8:	e5 00       	.word	0x00e5	; ????
  ba:	e5 00       	.word	0x00e5	; ????
  bc:	e5 00       	.word	0x00e5	; ????
  be:	e5 00       	.word	0x00e5	; ????
  c0:	e5 00       	.word	0x00e5	; ????
  c2:	e5 00       	.word	0x00e5	; ????
  c4:	e5 00       	.word	0x00e5	; ????
  c6:	e5 00       	.word	0x00e5	; ????
  c8:	e5 00       	.word	0x00e5	; ????
  ca:	e5 00       	.word	0x00e5	; ????
  cc:	e5 00       	.word	0x00e5	; ????
  ce:	e5 00       	.word	0x00e5	; ????
  d0:	e5 00       	.word	0x00e5	; ????
  d2:	e5 00       	.word	0x00e5	; ????
  d4:	df 00       	.word	0x00df	; ????
  d6:	e5 00       	.word	0x00e5	; ????
  d8:	e5 00       	.word	0x00e5	; ????
  da:	e5 00       	.word	0x00e5	; ????
  dc:	d3 00       	.word	0x00d3	; ????
  de:	e5 00       	.word	0x00e5	; ????
  e0:	c7 00       	.word	0x00c7	; ????
  e2:	bb 00       	.word	0x00bb	; ????
  e4:	e5 00       	.word	0x00e5	; ????
  e6:	e5 00       	.word	0x00e5	; ????
  e8:	e5 00       	.word	0x00e5	; ????
  ea:	e5 00       	.word	0x00e5	; ????
  ec:	e5 00       	.word	0x00e5	; ????
  ee:	e5 00       	.word	0x00e5	; ????
  f0:	e5 00       	.word	0x00e5	; ????
  f2:	e5 00       	.word	0x00e5	; ????
  f4:	e5 00       	.word	0x00e5	; ????
  f6:	e5 00       	.word	0x00e5	; ????
  f8:	e5 00       	.word	0x00e5	; ????
  fa:	e5 00       	.word	0x00e5	; ????
  fc:	e5 00       	.word	0x00e5	; ????
  fe:	e5 00       	.word	0x00e5	; ????
 100:	e5 00       	.word	0x00e5	; ????
 102:	e5 00       	.word	0x00e5	; ????
 104:	e5 00       	.word	0x00e5	; ????
 106:	e5 00       	.word	0x00e5	; ????
 108:	e5 00       	.word	0x00e5	; ????
 10a:	e5 00       	.word	0x00e5	; ????
 10c:	e5 00       	.word	0x00e5	; ????
 10e:	e5 00       	.word	0x00e5	; ????
 110:	e5 00       	.word	0x00e5	; ????
 112:	e5 00       	.word	0x00e5	; ????
 114:	dc 00       	.word	0x00dc	; ????
 116:	e5 00       	.word	0x00e5	; ????
 118:	e5 00       	.word	0x00e5	; ????
 11a:	e5 00       	.word	0x00e5	; ????
 11c:	d0 00       	.word	0x00d0	; ????
 11e:	e5 00       	.word	0x00e5	; ????
 120:	c4 00       	.word	0x00c4	; ????
 122:	e8 00       	.word	0x00e8	; ????
 124:	e5 00       	.word	0x00e5	; ????
 126:	e5 00       	.word	0x00e5	; ????
 128:	e5 00       	.word	0x00e5	; ????
 12a:	e5 00       	.word	0x00e5	; ????
 12c:	e5 00       	.word	0x00e5	; ????
 12e:	e5 00       	.word	0x00e5	; ????
 130:	e5 00       	.word	0x00e5	; ????
 132:	e5 00       	.word	0x00e5	; ????
 134:	d9 00       	.word	0x00d9	; ????
 136:	e5 00       	.word	0x00e5	; ????
 138:	e5 00       	.word	0x00e5	; ????
 13a:	e5 00       	.word	0x00e5	; ????
 13c:	cd 00       	.word	0x00cd	; ????
 13e:	e5 00       	.word	0x00e5	; ????
 140:	c1 00       	.word	0x00c1	; ????
 142:	b8 00       	.word	0x00b8	; ????

00000144 <__ctors_end>:
 144:	11 24       	eor	r1, r1
 146:	1f be       	out	0x3f, r1	; 63
 148:	cf e5       	ldi	r28, 0x5F	; 95
 14a:	d8 e0       	ldi	r29, 0x08	; 8
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	0e 94 01 01 	call	0x202	; 0x202 <main>
 154:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

00000158 <__bad_interrupt>:
 158:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015c <convert>:
	return 0;
}


int convert(int code) {
	switch(code) {
 15c:	87 57       	subi	r24, 0x77	; 119
 15e:	91 09       	sbc	r25, r1
 160:	88 37       	cpi	r24, 0x78	; 120
 162:	91 05       	cpc	r25, r1
 164:	90 f5       	brcc	.+100    	; 0x1ca <convert+0x6e>
 166:	86 5d       	subi	r24, 0xD6	; 214
 168:	9f 4f       	sbci	r25, 0xFF	; 255
 16a:	fc 01       	movw	r30, r24
 16c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__tablejump2__>
		case 0b11101110: // 1 wiersz, 1 kolumna
		return 0b01;  //zwraca 1
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret
		break;
		case 0b11011110: // 1 wiersz, 2 kolumna
		return 0b10;  //zwraca 2
		break;
		case 0b10111110: // 1 wiersz, 3 kolumna
		return 0b11;  //zwraca 3
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	08 95       	ret
		break;
		case 0b01111110: // ...
		return 0b100; //zwraca 4
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret
		break;
		case 0b11101101: //  wiersz, 1 kolumna
		return 0b101; //zwraca 5
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret
		break;
		case 0b11011101:
		return 0b110; //zwraca 6
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret
		break;
		case 0b10111101:
		return 0b111; //zwraca 7
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret
		break;
		case 0b01111101:
		return 0b1000;//8
 194:	88 e0       	ldi	r24, 0x08	; 8
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret
		break;
		case 0b11101011:
		return 0b1001;//9
 19a:	89 e0       	ldi	r24, 0x09	; 9
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret
		break;
		case 0b11011011:
		return 0b1010;//10
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	08 95       	ret
		break;
		case 0b10111011:
		return 0b1011;//11
 1a6:	8b e0       	ldi	r24, 0x0B	; 11
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	08 95       	ret
		break;
		case 0b01111011:
		return 0b1100;//12
 1ac:	8c e0       	ldi	r24, 0x0C	; 12
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	08 95       	ret
		break;
		case 0b11100111:
		return 0b1101;//13
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret
		break;
		case 0b11010111:
		return 0b1110;//14
 1b8:	8e e0       	ldi	r24, 0x0E	; 14
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	08 95       	ret
		break;
		case 0b10110111:
		return 0b1111; //15
 1be:	8f e0       	ldi	r24, 0x0F	; 15
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 95       	ret
		break;
		case 0b01110111:
		return 0b10000; //16
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 95       	ret
		break;
		default:
		break;
	}
	return 0x00;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret
	switch(code) {
		case 0b11101110: // 1 wiersz, 1 kolumna
		return 0b01;  //zwraca 1
		break;
		case 0b11011110: // 1 wiersz, 2 kolumna
		return 0b10;  //zwraca 2
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		break;
	}
	return 0x00;
}
 1d4:	08 95       	ret

000001d6 <getValueFromKeyboard>:
#include <avr/io.h>
#include <util/delay.h>

int getValueFromKeyboard() {
	unsigned char wiersz, kolumna, key;
	for(kolumna=0xEF, key = 1; kolumna >= 0x71; (kolumna <<= 1 | 0x01)&0xFF) {
 1d6:	2f ee       	ldi	r18, 0xEF	; 239
 1d8:	0f c0       	rjmp	.+30     	; 0x1f8 <getValueFromKeyboard+0x22>
		SP_PORT = kolumna;
 1da:	2b bb       	out	0x1b, r18	; 27
		for(wiersz=0x01; wiersz <= 0x08; wiersz <<= 1, key++) {
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <getValueFromKeyboard+0x1c>
			if(!(SP_PIN & wiersz))
 1e0:	99 b3       	in	r25, 0x19	; 25
 1e2:	98 23       	and	r25, r24
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <getValueFromKeyboard+0x1a>
			return convert(SP_PIN);
 1e6:	89 b3       	in	r24, 0x19	; 25
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 ae 00 	call	0x15c	; 0x15c <convert>
 1ee:	08 95       	ret

int getValueFromKeyboard() {
	unsigned char wiersz, kolumna, key;
	for(kolumna=0xEF, key = 1; kolumna >= 0x71; (kolumna <<= 1 | 0x01)&0xFF) {
		SP_PORT = kolumna;
		for(wiersz=0x01; wiersz <= 0x08; wiersz <<= 1, key++) {
 1f0:	88 0f       	add	r24, r24
 1f2:	89 30       	cpi	r24, 0x09	; 9
 1f4:	a8 f3       	brcs	.-22     	; 0x1e0 <getValueFromKeyboard+0xa>
#include <avr/io.h>
#include <util/delay.h>

int getValueFromKeyboard() {
	unsigned char wiersz, kolumna, key;
	for(kolumna=0xEF, key = 1; kolumna >= 0x71; (kolumna <<= 1 | 0x01)&0xFF) {
 1f6:	22 0f       	add	r18, r18
 1f8:	21 37       	cpi	r18, 0x71	; 113
 1fa:	78 f7       	brcc	.-34     	; 0x1da <getValueFromKeyboard+0x4>
		for(wiersz=0x01; wiersz <= 0x08; wiersz <<= 1, key++) {
			if(!(SP_PIN & wiersz))
			return convert(SP_PIN);
		}
	}
	return 0;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
}
 200:	08 95       	ret

00000202 <main>:
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	84 bb       	out	0x14, r24	; 20
 206:	80 ef       	ldi	r24, 0xF0	; 240
 208:	8a bb       	out	0x1a, r24	; 26
 20a:	8f e0       	ldi	r24, 0x0F	; 15
 20c:	8b bb       	out	0x1b, r24	; 27
 20e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <getValueFromKeyboard>
 212:	85 bb       	out	0x15, r24	; 21
 214:	fc cf       	rjmp	.-8      	; 0x20e <main+0xc>

00000216 <__tablejump2__>:
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	05 90       	lpm	r0, Z+
 21c:	f4 91       	lpm	r31, Z
 21e:	e0 2d       	mov	r30, r0
 220:	09 94       	ijmp

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
